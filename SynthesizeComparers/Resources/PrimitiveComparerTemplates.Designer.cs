//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SynthesizeComparers.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class PrimitiveComparerTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal PrimitiveComparerTemplates() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SynthesizeComparers.Resources.PrimitiveComparerTestTemplates", typeof(PrimitiveComparerTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Compares a $signedType$ to a $unsignedType$
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  0 when x == y
        ///    /// * -1 when x lt; y
        ///    /// *  1 when x gt; y
        ///    /// &lt;/returns&gt;
        ///    public static int Compare($signedType$ x, $unsignedType$ y)
        ///    {
        ///        if (x &lt; 0) return -1;
        ///        if (y &gt; $signedType$.MaxValue) return -1;
        ///        return (($unsignedTy [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareSameSizeUnsignedToSigned {
            get {
                return ResourceManager.GetString("CompareSameSizeUnsignedToSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Compares a $signedType$ to a $unsignedType$
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  0 when x == y
        ///    /// * -1 when x lt; y
        ///    /// *  1 when x gt; y
        ///    /// &lt;/returns&gt;
        ///    public static int Compare($signedType$ x, $unsignedType$ y)
        ///    {
        ///		if (x &lt; 0) return -1;
        ///		if (y &gt; ($unsignedType$)$signedType$.MaxValue) return -1;
        ///		return (($unsignedType [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareSmallerSignedToLargerUnsigned {
            get {
                return ResourceManager.GetString("CompareSmallerSignedToLargerUnsigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Compares a $signedType$ to a $unsignedType$
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  0 when x == y
        ///    /// * -1 when x lt; y
        ///    /// *  1 when x gt; y
        ///    /// &lt;/returns&gt;
        ///    public static int Compare($signedType$ x, $unsignedType$ y)
        ///    {
        ///		return x &lt; 0 ? -1 : x.CompareTo(y);
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// Compares a $unsignedType$ to a $sig [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareSmallerUnsignedToLargerSigned {
            get {
                return ResourceManager.GetString("CompareSmallerUnsignedToLargerSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Compares a $firstType$ to a $secondType$
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  0 when x == y
        ///    /// * -1 when x lt; y
        ///    /// *  1 when x gt; y
        ///    /// &lt;/returns&gt;
        ///    public static int Compare($firstType$ x, $secondType$ y)
        ///    {
        ///         var x1=($upcastType$)x;
        ///         var y1=($upcastType$)y;
        ///         return x1.CompareTo(y1);
        ///    }
        ///
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareUpcastBoth {
            get {
                return ResourceManager.GetString("CompareUpcastBoth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Compares a $largerType$ to a $smallerType$
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  0 when x == y
        ///    /// * -1 when x lt; y
        ///    /// *  1 when x gt; y
        ///    /// &lt;/returns&gt;
        ///    public static int Compare($largerType$ x, $smallerType$ y)
        ///    {
        ///         return x.CompareTo(y);
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// Compares a $smallerType$ to a $largerType$  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareUpcastToLarger {
            get {
                return ResourceManager.GetString("CompareUpcastToLarger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a Boolean and a $nonbooleanType$ for equality
        ///    /// Zero converts to false and non-zero to true.
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals(Boolean x, $nonbooleanType$ y)
        ///    {
        ///         var y1 = y != 0;
        ///         return x == y1;
        ///    }
        ///
        ///    /// &lt;su [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsBooleanToNonboolean {
            get {
                return ResourceManager.GetString("EqualsBooleanToNonboolean", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a $signedType$ and a $unsignedType$ for equality
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals($signedType$ x, $unsignedType$ y)
        ///    {
        ///        if ( x &lt; 0 || y &gt; $signedType$.MaxValue) return false;
        ///        return (($unsignedType$)x).Equals(y);
        ///    }
        ///
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsSameSizeUnsignedToSigned {
            get {
                return ResourceManager.GetString("EqualsSameSizeUnsignedToSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a $signedType$ and a $unsignedType$ for equality
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals($signedType$ x, $unsignedType$ y)
        ///    {
        ///		if (x &lt; 0 || y &gt; ($unsignedType$)$signedType$.MaxValue) return false;
        ///		return (($unsignedType$)x) == y;
        ///    }
        ///
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsSmallerSignedToLargerUnsigned {
            get {
                return ResourceManager.GetString("EqualsSmallerSignedToLargerUnsigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a $signedType$ and a $unsignedType$ for equality
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals($signedType$ x, $unsignedType$ y)
        ///    {
        ///		if (x &lt; 0) return false;
        ///		return x == y;
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// Checks a $unsignedType$ and a $signedTy [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsSmallerUnsignedToLargerSigned {
            get {
                return ResourceManager.GetString("EqualsSmallerUnsignedToLargerSigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a $firstType$ and a $secondType$ for equality
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals($firstType$ x, $secondType$ y)
        ///    {
        ///         var y1=($firstType$)y;
        ///         return x.Equals(y1);
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// Checks a $secondType$ and a [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsUpcastBoth {
            get {
                return ResourceManager.GetString("EqualsUpcastBoth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     /// &lt;summary&gt;
        ///    /// Checks a $largerType$ and a $smallerType$ for equality
        ///    /// &lt;/summary&gt;
        ///    /// &lt;param name=&quot;x&quot;&gt;The first item to compare&lt;/param&gt;
        ///    /// &lt;param name=&quot;y&quot;&gt;The second item to compare&lt;/param&gt;
        ///    /// &lt;returns&gt;
        ///    /// *  true when x == y
        ///    /// *  false otherwise
        ///    /// &lt;/returns&gt;
        ///    public static bool Equals($largerType$ x, $smallerType$ y)
        ///    {
        ///         return x == y;
        ///    }
        ///
        ///    /// &lt;summary&gt;
        ///    /// Checks a $smallerType$ and a $largerType$ for equality
        ///    // [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EqualsUpcastToLarger {
            get {
                return ResourceManager.GetString("EqualsUpcastToLarger", resourceCulture);
            }
        }
    }
}
