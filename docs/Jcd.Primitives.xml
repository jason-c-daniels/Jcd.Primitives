<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jcd.Primitives</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:Jcd.Primitives.ExtendedTypeInfo">
            <summary>
            Contains some additional, sometimes sought after metadata about types.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.IsSigned">
            <summary>
            Indicates if the type is signed.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.IsFloatingPoint">
            <summary>
            Indicates if the type is float,double, or decimal.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.Size">
            <summary>
            The size of the type in bytes.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.Type">
            <summary>
            The core type.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.IsPrimitiveStructOrEnum">
            <summary>
            Indicates if a type is a primitive struct or primitive enum.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.ExtendedTypeInfo.IsUserDefinedStructOrEnum">
            <summary>
            Indicates if a type is a user defined struct or user defined enum.
            </summary>
        </member>
        <member name="M:Jcd.Primitives.ExtendedTypeInfo.#ctor(System.Type)">
            <summary>
            Constructs a new ExtendedTypeInfo instance from an existing type. 
            </summary>
            <param name="type">the type to inspect</param>
        </member>
        <member name="T:Jcd.Primitives.IDisjointComparer`2">
            <summary>
            Defines methods to support the comparison of two items of differing
            types, which don't support IEquatable&lt;T1&gt; AND IEquatable&lt;T2&gt;
            <remarks>
            An inability to implement IEquatable&lt;T1&gt; AND IEquatable&lt;T2&gt;
            on the same containing type is actually pretty common as
            the "may unify..." compiler error message happens when the compiler
            thinks there's a slight hint of a chance that T1 and T2 COULD become
            the same data type.
            
            Of course for IEquatable, and IComparable that's often perfectly
            fine, not necessarily true of other operations tho.
            </remarks>
            </summary>
            <typeparam name="T1">The first data type.</typeparam>
            <typeparam name="T2">The second data type.</typeparam>
        </member>
        <member name="M:Jcd.Primitives.IDisjointComparer`2.Compare(`0,`1)">
            <summary>
            Compares an instance of T1 to an instance of T2.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.IDisjointComparer`2.Compare(`1,`0)">
            <summary>
            Compares an instance of T1 to an instance of T2.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="T:Jcd.Primitives.IDisjointEqualityComparer`2">
            <summary>
            Defines methods to support the comparison of two items of differing
            types for equality, which don't support IEquatable&lt;T1&gt; AND
            IEquatable&lt;T2&gt;
            <remarks>
            An inability to implement IEquatable&lt;T1&gt; AND IEquatable&lt;T2&gt;
            on the same containing type is actually pretty common as
            the "may unify..." compiler error message happens when the compiler
            thinks there's a slight hint of a chance that T1 and T2 COULD become
            the same data type.
            
            Of course for IEquatable, and IComparable that's often perfectly
            fine, not necessarily true of other operations tho.
            </remarks>
            </summary>
            <typeparam name="T1">The first data type.</typeparam>
            <typeparam name="T2">The second data type.</typeparam>
        </member>
        <member name="M:Jcd.Primitives.IDisjointEqualityComparer`2.Equals(`0,`1)">
            <summary>
            Compares an instance of T1 to an instance of T2.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>True if equivalent.</returns>
        </member>
        <member name="M:Jcd.Primitives.IDisjointEqualityComparer`2.Equals(`1,`0)">
            <summary>
            Compares an instance of T1 to an instance of T2.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>True if equivalent.</returns>
        </member>
        <member name="T:Jcd.Primitives.NamespaceDoc">
            <summary>
            Provides TODO: A description of what this namespace provides.
            </summary>
        </member>
        <member name="T:Jcd.Primitives.PrimitiveComparer">
            <summary>
            A primitive type comparer. Intended for use with GenericPrimitiveTypeComparer.
            </summary>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Byte)">
            <summary>
            Checks a Boolean and a Byte for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Boolean)">
            <summary>
            Checks a Byte and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.SByte)">
            <summary>
            Checks a Boolean and a SByte for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Boolean)">
            <summary>
            Checks a SByte and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Int16)">
            <summary>
            Checks a Boolean and a Int16 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Boolean)">
            <summary>
            Checks a Int16 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.UInt16)">
            <summary>
            Checks a Boolean and a UInt16 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Boolean)">
            <summary>
            Checks a UInt16 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Int32)">
            <summary>
            Checks a Boolean and a Int32 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Boolean)">
            <summary>
            Checks a Int32 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.UInt32)">
            <summary>
            Checks a Boolean and a UInt32 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Boolean)">
            <summary>
            Checks a UInt32 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Single)">
            <summary>
            Checks a Boolean and a Single for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.Boolean)">
            <summary>
            Checks a Single and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Int64)">
            <summary>
            Checks a Boolean and a Int64 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.Boolean)">
            <summary>
            Checks a Int64 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.UInt64)">
            <summary>
            Checks a Boolean and a UInt64 for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Boolean)">
            <summary>
            Checks a UInt64 and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Double)">
            <summary>
            Checks a Boolean and a Double for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.Boolean)">
            <summary>
            Checks a Double and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Boolean,System.Decimal)">
            <summary>
            Checks a Boolean and a Decimal for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.Boolean)">
            <summary>
            Checks a Decimal and a Boolean for equality
            Zero converts to false and non-zero to true.
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Byte)">
            <summary>
            Checks a SByte and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.SByte)">
            <summary>
            Checks a Byte and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Byte)">
            <summary>
            Compares a SByte to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.SByte)">
            <summary>
            Compares a Byte to a SByte 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Byte)">
            <summary>
            Checks a UInt16 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.UInt16)">
            <summary>
            Checks a Byte and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Byte)">
            <summary>
            Compares a UInt16 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.UInt16)">
            <summary>
            Compares a Byte to a UInt16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.UInt16)">
            <summary>
            Checks a SByte and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.SByte)">
            <summary>
            Checks a UInt16 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.UInt16)">
            <summary>
            Compares a SByte to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.SByte)">
            <summary>
            Compares a UInt16 to a SByte 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.UInt16)">
            <summary>
            Checks a Int16 and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Int16)">
            <summary>
            Checks a UInt16 and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.UInt16)">
            <summary>
            Compares a Int16 to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Int16)">
            <summary>
            Compares a UInt16 to a Int16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Byte)">
            <summary>
            Checks a Int16 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Int16)">
            <summary>
            Checks a Byte and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Byte)">
            <summary>
            Compares a Int16 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Int16)">
            <summary>
            Compares a Byte to a Int16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.SByte)">
            <summary>
            Checks a Int16 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Int16)">
            <summary>
            Checks a SByte and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.SByte)">
            <summary>
            Compares a Int16 to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Int16)">
            <summary>
            Compares a SByte to a Int16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Byte)">
            <summary>
            Checks a UInt32 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.UInt32)">
            <summary>
            Checks a Byte and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Byte)">
            <summary>
            Compares a UInt32 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.UInt32)">
            <summary>
            Compares a Byte to a UInt32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.UInt32)">
            <summary>
            Checks a SByte and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.SByte)">
            <summary>
            Checks a UInt32 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.UInt32)">
            <summary>
            Compares a SByte to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.SByte)">
            <summary>
            Compares a UInt32 to a SByte 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.UInt32)">
            <summary>
            Checks a Int16 and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Int16)">
            <summary>
            Checks a UInt32 and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.UInt32)">
            <summary>
            Compares a Int16 to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Int16)">
            <summary>
            Compares a UInt32 to a Int16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.UInt16)">
            <summary>
            Checks a UInt32 and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.UInt32)">
            <summary>
            Checks a UInt16 and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.UInt16)">
            <summary>
            Compares a UInt32 to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.UInt32)">
            <summary>
            Compares a UInt16 to a UInt32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.UInt32)">
            <summary>
            Checks a Int32 and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Int32)">
            <summary>
            Checks a UInt32 and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.UInt32)">
            <summary>
            Compares a Int32 to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Int32)">
            <summary>
            Compares a UInt32 to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.UInt32)">
            <summary>
            Checks a Single and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Single)">
            <summary>
            Checks a UInt32 and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.UInt32)">
            <summary>
            Compares a Single to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Single)">
            <summary>
            Compares a UInt32 to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Byte)">
            <summary>
            Checks a Int32 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Int32)">
            <summary>
            Checks a Byte and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Byte)">
            <summary>
            Compares a Int32 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Int32)">
            <summary>
            Compares a Byte to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.SByte)">
            <summary>
            Checks a Int32 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Int32)">
            <summary>
            Checks a SByte and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.SByte)">
            <summary>
            Compares a Int32 to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Int32)">
            <summary>
            Compares a SByte to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Int16)">
            <summary>
            Checks a Int32 and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Int32)">
            <summary>
            Checks a Int16 and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Int16)">
            <summary>
            Compares a Int32 to a Int16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Int32)">
            <summary>
            Compares a Int16 to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.UInt16)">
            <summary>
            Checks a Int32 and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Int32)">
            <summary>
            Checks a UInt16 and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.UInt16)">
            <summary>
            Compares a Int32 to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Int32)">
            <summary>
            Compares a UInt16 to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.Int32)">
            <summary>
            Checks a Single and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Single)">
            <summary>
            Checks a Int32 and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.Int32)">
            <summary>
            Compares a Single to a Int32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Single)">
            <summary>
            Compares a Int32 to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.Byte)">
            <summary>
            Checks a Single and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Single)">
            <summary>
            Checks a Byte and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.Byte)">
            <summary>
            Compares a Single to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Single)">
            <summary>
            Compares a Byte to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.SByte)">
            <summary>
            Checks a Single and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Single)">
            <summary>
            Checks a SByte and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.SByte)">
            <summary>
            Compares a Single to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Single)">
            <summary>
            Compares a SByte to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.Int16)">
            <summary>
            Checks a Single and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Single)">
            <summary>
            Checks a Int16 and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.Int16)">
            <summary>
            Compares a Single to a Int16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Single)">
            <summary>
            Compares a Int16 to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.UInt16)">
            <summary>
            Checks a Single and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Single)">
            <summary>
            Checks a UInt16 and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.UInt16)">
            <summary>
            Compares a Single to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Single)">
            <summary>
            Compares a UInt16 to a Single 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Byte)">
            <summary>
            Checks a UInt64 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.UInt64)">
            <summary>
            Checks a Byte and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.Byte)">
            <summary>
            Compares a UInt64 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.UInt64)">
            <summary>
            Compares a Byte to a UInt64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.UInt64)">
            <summary>
            Checks a SByte and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.SByte)">
            <summary>
            Checks a UInt64 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.UInt64)">
            <summary>
            Compares a SByte to a UInt64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.SByte)">
            <summary>
            Compares a UInt64 to a SByte 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.UInt64)">
            <summary>
            Checks a Int16 and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Int16)">
            <summary>
            Checks a UInt64 and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.UInt64)">
            <summary>
            Compares a Int16 to a UInt64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.Int16)">
            <summary>
            Compares a UInt64 to a Int16 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.UInt16)">
            <summary>
            Checks a UInt64 and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.UInt64)">
            <summary>
            Checks a UInt16 and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.UInt16)">
            <summary>
            Compares a UInt64 to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.UInt64)">
            <summary>
            Compares a UInt16 to a UInt64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.UInt64)">
            <summary>
            Checks a Int32 and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Int32)">
            <summary>
            Checks a UInt64 and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.UInt64)">
            <summary>
            Compares a Int32 to a UInt64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.Int32)">
            <summary>
            Compares a UInt64 to a Int32 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.UInt32)">
            <summary>
            Checks a UInt64 and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.UInt64)">
            <summary>
            Checks a UInt32 and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.UInt32)">
            <summary>
            Compares a UInt64 to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.UInt64)">
            <summary>
            Compares a UInt32 to a UInt64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.UInt64)">
            <summary>
            Checks a Int64 and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Int64)">
            <summary>
            Checks a UInt64 and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.UInt64)">
            <summary>
            Compares a Int64 to a UInt64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.Int64)">
            <summary>
            Compares a UInt64 to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.Byte)">
            <summary>
            Checks a Int64 and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Int64)">
            <summary>
            Checks a Byte and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.Byte)">
            <summary>
            Compares a Int64 to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Int64)">
            <summary>
            Compares a Byte to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.SByte)">
            <summary>
            Checks a Int64 and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Int64)">
            <summary>
            Checks a SByte and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.SByte)">
            <summary>
            Compares a Int64 to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Int64)">
            <summary>
            Compares a SByte to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.Int16)">
            <summary>
            Checks a Int64 and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Int64)">
            <summary>
            Checks a Int16 and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.Int16)">
            <summary>
            Compares a Int64 to a Int16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Int64)">
            <summary>
            Compares a Int16 to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.UInt16)">
            <summary>
            Checks a Int64 and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Int64)">
            <summary>
            Checks a UInt16 and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.UInt16)">
            <summary>
            Compares a Int64 to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Int64)">
            <summary>
            Compares a UInt16 to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.Int32)">
            <summary>
            Checks a Int64 and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Int64)">
            <summary>
            Checks a Int32 and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.Int32)">
            <summary>
            Compares a Int64 to a Int32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Int64)">
            <summary>
            Compares a Int32 to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.UInt32)">
            <summary>
            Checks a Int64 and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Int64)">
            <summary>
            Checks a UInt32 and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.UInt32)">
            <summary>
            Compares a Int64 to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Int64)">
            <summary>
            Compares a UInt32 to a Int64 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.Byte)">
            <summary>
            Checks a Double and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Double)">
            <summary>
            Checks a Byte and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.Byte)">
            <summary>
            Compares a Double to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Double)">
            <summary>
            Compares a Byte to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.SByte)">
            <summary>
            Checks a Double and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Double)">
            <summary>
            Checks a SByte and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.SByte)">
            <summary>
            Compares a Double to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Double)">
            <summary>
            Compares a SByte to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.Int16)">
            <summary>
            Checks a Double and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Double)">
            <summary>
            Checks a Int16 and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.Int16)">
            <summary>
            Compares a Double to a Int16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Double)">
            <summary>
            Compares a Int16 to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.UInt16)">
            <summary>
            Checks a Double and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Double)">
            <summary>
            Checks a UInt16 and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.UInt16)">
            <summary>
            Compares a Double to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Double)">
            <summary>
            Compares a UInt16 to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.Int32)">
            <summary>
            Checks a Double and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Double)">
            <summary>
            Checks a Int32 and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.Int32)">
            <summary>
            Compares a Double to a Int32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Double)">
            <summary>
            Compares a Int32 to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.UInt32)">
            <summary>
            Checks a Double and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Double)">
            <summary>
            Checks a UInt32 and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.UInt32)">
            <summary>
            Compares a Double to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Double)">
            <summary>
            Compares a UInt32 to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Double,System.Single)">
            <summary>
            Checks a Double and a Single for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Single,System.Double)">
            <summary>
            Checks a Single and a Double for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Double,System.Single)">
            <summary>
            Compares a Double to a Single
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Single,System.Double)">
            <summary>
            Compares a Single to a Double 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.Byte)">
            <summary>
            Checks a Decimal and a Byte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Byte,System.Decimal)">
            <summary>
            Checks a Byte and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.Byte)">
            <summary>
            Compares a Decimal to a Byte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Byte,System.Decimal)">
            <summary>
            Compares a Byte to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.SByte)">
            <summary>
            Checks a Decimal and a SByte for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.SByte,System.Decimal)">
            <summary>
            Checks a SByte and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.SByte)">
            <summary>
            Compares a Decimal to a SByte
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.SByte,System.Decimal)">
            <summary>
            Compares a SByte to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.Int16)">
            <summary>
            Checks a Decimal and a Int16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int16,System.Decimal)">
            <summary>
            Checks a Int16 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.Int16)">
            <summary>
            Compares a Decimal to a Int16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int16,System.Decimal)">
            <summary>
            Compares a Int16 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.UInt16)">
            <summary>
            Checks a Decimal and a UInt16 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt16,System.Decimal)">
            <summary>
            Checks a UInt16 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.UInt16)">
            <summary>
            Compares a Decimal to a UInt16
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt16,System.Decimal)">
            <summary>
            Compares a UInt16 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.Int32)">
            <summary>
            Checks a Decimal and a Int32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int32,System.Decimal)">
            <summary>
            Checks a Int32 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.Int32)">
            <summary>
            Compares a Decimal to a Int32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int32,System.Decimal)">
            <summary>
            Compares a Int32 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.UInt32)">
            <summary>
            Checks a Decimal and a UInt32 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt32,System.Decimal)">
            <summary>
            Checks a UInt32 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.UInt32)">
            <summary>
            Compares a Decimal to a UInt32
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt32,System.Decimal)">
            <summary>
            Compares a UInt32 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.Int64)">
            <summary>
            Checks a Decimal and a Int64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Int64,System.Decimal)">
            <summary>
            Checks a Int64 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.Int64)">
            <summary>
            Compares a Decimal to a Int64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Int64,System.Decimal)">
            <summary>
            Compares a Int64 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.Decimal,System.UInt64)">
            <summary>
            Checks a Decimal and a UInt64 for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Equals(System.UInt64,System.Decimal)">
            <summary>
            Checks a UInt64 and a Decimal for equality
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  true when x == y
            *  false otherwise
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.Decimal,System.UInt64)">
            <summary>
            Compares a Decimal to a UInt64
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="M:Jcd.Primitives.PrimitiveComparer.Compare(System.UInt64,System.Decimal)">
            <summary>
            Compares a UInt64 to a Decimal 
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>
            *  0 when x == y
            * -1 when x lt; y
            *  1 when x gt; y
            </returns>
        </member>
        <member name="T:Jcd.Primitives.PrimitiveTypes">
            <summary>
            A helper class that provides some niche use case
            properties for primitive numeric types and boolean.
            </summary>
        </member>
        <member name="F:Jcd.Primitives.PrimitiveTypes.NumericTypes">
            <summary>
            Returns the full set of CLR verifiably safe numeric types and boolean.
            (i.e. nint and nuint cannot be included as certain operations
            such as sizeof() are not supported outside of an unsafe context)
            </summary>
        </member>
        <member name="F:Jcd.Primitives.PrimitiveTypes.CrossProductOfNumericTypes">
            <summary>
            Gets the cross product of all values in NumericTypesAndBoolean as <c>TypePairing</c> instances.
            </summary>
        </member>
        <member name="T:Jcd.Primitives.TypeExtensions">
            <summary>
            A set of extension methods for Type that people seem to keep asking
            about/for on StackOverflow. 
            </summary>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.IsUserDefinedStructOrEnum(System.Type)">
            <summary>
            Determines if a type is a user defined struct
            or user defined enum.
            </summary>
            <param name="type">the type to inspect</param>
            <returns>true if the type is a used defined struct or enum.</returns>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.IsPrimitiveStructOrEnum(System.Type)">
            <summary>
            Determines if a type is a a primitive struct or primitive (built-in) enum
            </summary>
            <param name="type">the type to inspect.</param>
            <returns>True if the type is a primitive struct or enum.</returns>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.SizeOf(System.Type)">
            <summary>
            Retrieves the sizeof(T) for a given primitive type (not enums). 
            </summary>
            <param name="type">The primitive type to inspect</param>
            <returns>the result of sizeof(T) for primitive types. -1 for non-primitive types and enums.</returns>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.IsSigned(System.Type)">
            <summary>
            Determines if a value of the provided type can be negative. (i.e. is it signed)
            </summary>
            <param name="type">The type to inspect</param>
            <returns>True if it's a signed type.</returns>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.IsFloatingPoint(System.Type)">
            <summary>
            Determines if the provided type is a floating point or decimal type.
            </summary>
            <param name="type">the type to inspect</param>
            <returns>True if float,double or decimal. False otherwise.</returns>
        </member>
        <member name="M:Jcd.Primitives.TypeExtensions.GetExtendedTypeInfo(System.Type)">
            <summary>
            Retrieves the extended type information for the provided type. 
            </summary>
            <param name="type">The type to act upon.</param>
            <returns>The extended type information.</returns>
        </member>
        <member name="T:Jcd.Primitives.TypePairing">
             <summary>
             Represents a unique pairing of two types.
             </summary>
             <remarks>A pairing is considered identical for x and y if:
                  x.First==y.First &amp;&amp; x.Second==y.Second
             -- OR --
                  x.First==y.Second &amp;&amp; x.Second==y.First
            
             To help with other operations, the hashcode is computed such that it's the same for any T1 and T2
             regardless if T1 or T2 are first or second.
             </remarks>
        </member>
        <member name="P:Jcd.Primitives.TypePairing.First">
            <summary>
             The first type in the pairing.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.TypePairing.Second">
            <summary>
            The second type in the pairing.
            </summary>
        </member>
        <member name="P:Jcd.Primitives.TypePairing.AreSameType">
            <summary>
            Indicates if the pairing is an identity pairing. 
            </summary>
        </member>
        <member name="M:Jcd.Primitives.TypePairing.#ctor(System.Type,System.Type)">
            <summary>
            Constructs an instance of TypePairing from two instances of Type.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:Jcd.Primitives.TypePairing.Equals(Jcd.Primitives.TypePairing)">
            <inheritdoc />
        </member>
        <member name="M:Jcd.Primitives.TypePairing.GetHashCode">
            <inheritdoc />
        </member>
        <member name="F:Jcd.Primitives.TypePairing.FormatString">
            <summary>
            The format string for a TypePairing.
            * {0} is the type name of First.
            * {1} is the type name of Second.
            </summary>
        </member>
        <member name="M:Jcd.Primitives.TypePairing.ToString">
            <inheritdoc />
        </member>
    </members>
</doc>
